diff --git a/arch/riscv/Kconfig b/arch/riscv/Kconfig
index ca764d54d..7fff78a68 100644
--- a/arch/riscv/Kconfig
+++ b/arch/riscv/Kconfig
@@ -67,6 +67,13 @@ config BUILTIN_DTB_NAME
 	string "DTB to build into the barebox image"
 	depends on BUILTIN_DTB
 
+config SPIFLASH_DTB
+	bool "use DTB from spiflash"
+	depends on OFTREE
+
+config SPIFLASH_DTB_ADDR
+	hex "address of the DTB in memory mapped spiflash"
+
 source "arch/riscv/mach-erizo/Kconfig"
 source "arch/riscv/mach-litex/Kconfig"
 
diff --git a/arch/riscv/boot/dtb.c b/arch/riscv/boot/dtb.c
index 5d73413a4..1058385bb 100644
--- a/arch/riscv/boot/dtb.c
+++ b/arch/riscv/boot/dtb.c
@@ -24,7 +24,12 @@ static int of_riscv_init(void)
 	if (root)
 		return 0;
 
-	root = of_unflatten_dtb(__dtb_start);
+    if (IS_ENABLED(CONFIG_SPIFLASH_DTB)) {
+        root = of_unflatten_dtb((const void *)CONFIG_SPIFLASH_DTB_ADDR);
+    }
+    else {
+	    root = of_unflatten_dtb(__dtb_start);
+    }
 	if (!IS_ERR(root)) {
 		pr_debug("using internal DTB\n");
 		of_set_root_node(root);
diff --git a/arch/riscv/mach-litex/env/boot/net b/arch/riscv/mach-litex/env/boot/net
new file mode 100644
index 000000000..91b6b1242
--- /dev/null
+++ b/arch/riscv/mach-litex/env/boot/net
@@ -0,0 +1,7 @@
+#!/bin/sh
+
+oftree -s rv32.dtb
+memcpy -s rv32.dtb 0 0x40ef0000 0x2000000
+memcpy -s /mnt/nfs/fw_jump.bin 0 0x40f00000 0x2000000
+memcpy -s /mnt/nfs/Image 0 0x40000000 0x2000000
+go 0x40f00000
diff --git a/drivers/serial/serial_litex.c b/drivers/serial/serial_litex.c
index c8c50a057..f87dd4739 100644
--- a/drivers/serial/serial_litex.c
+++ b/drivers/serial/serial_litex.c
@@ -93,6 +93,8 @@ static int litex_serial_probe(struct device_d *dev)
 static __maybe_unused struct of_device_id litex_serial_dt_ids[] = {
 	{
 		.compatible = "litex,uart",
+	}, {
+		.compatible = "litex,liteuart",
 	}, {
 		/* sentinel */
 	}
