diff --git a/Documentation/devicetree/bindings/hwmon/adcxx.txt b/Documentation/devicetree/bindings/hwmon/adcxx.txt
new file mode 100644
index 000000000000..a94a5fe21b6d
--- /dev/null
+++ b/Documentation/devicetree/bindings/hwmon/adcxx.txt
@@ -0,0 +1,24 @@
+adcxx properties
+
+Required properties:
+- compatible: Must be one of the following:
+	- "national,adcxx1s" for adcxx1s
+	- "national,adcxx2s" for adcxx2s
+	- "national,adcxx4s" for adcxx4s
+	- "national,adcxx8s" for adcxx8s
+- reg: SPI address for chip
+
+Optional properties:
+
+- vref-supply
+  The external reference in microvolt for this device is set to this value.
+  If it does not exists the reference will be set to 3300000uV (3.3V).
+
+Example:
+
+adc@6 {
+	compatible = "national,adcxx2s";
+	reg = <6 0>;
+	spi-max-frequency = <1000000>;
+	vref-supply = <&vref>;
+};
diff --git a/drivers/hwmon/adcxx.c b/drivers/hwmon/adcxx.c
index 69e0bb97e597..6f3e7d65b5b8 100644
--- a/drivers/hwmon/adcxx.c
+++ b/drivers/hwmon/adcxx.c
@@ -4,6 +4,7 @@
  * The adcxx4s is an AD converter family from National Semiconductor (NS).
  *
  * Copyright (c) 2008 Marc Pignat <marc.pignat@hevs.ch>
+ * Copyright (c) 2017 Florian Eckert <fe@dev.tdt.de>
  *
  * The adcxx4s communicates with a host processor via an SPI/Microwire Bus
  * interface. This driver supports the whole family of devices with name
@@ -46,9 +47,16 @@
 #include <linux/mutex.h>
 #include <linux/mod_devicetable.h>
 #include <linux/spi/spi.h>
+#include <linux/of_device.h>
+#include <linux/regulator/consumer.h>
 
 #define DRVNAME		"adcxx"
 
+#define ADCXX1S  1
+#define ADCXX2S  2
+#define ADCXX4S  4
+#define ADCXX8S  8
+
 struct adcxx {
 	struct device *hwmon_dev;
 	struct mutex lock;
@@ -159,21 +167,60 @@ static struct sensor_device_attribute ad_input[] = {
 	SENSOR_ATTR(in7_input, S_IRUGO, adcxx_read, NULL, 7),
 };
 
+#ifdef CONFIG_OF
+static const struct of_device_id adcxx_of_ids[] = {
+	{
+		.compatible = "national,adcxx1s",
+		.data = (void *) ADCXX1S,
+	},
+	{
+		.compatible = "national,adcxx2s",
+		.data = (void *) ADCXX2S,
+	},
+	{
+		.compatible = "national,adcxx4s",
+		.data = (void *) ADCXX4S,
+	},
+	{
+		.compatible = "national,adcxx8s",
+	.	data = (void *) ADCXX8S,
+	},
+	{},
+};
+MODULE_DEVICE_TABLE(of, adcxx_of_ids);
+#endif
+
 /*----------------------------------------------------------------------*/
 
 static int adcxx_probe(struct spi_device *spi)
 {
-	int channels = spi_get_device_id(spi)->driver_data;
+	const struct of_device_id *match;
+	struct regulator *vref;
+	int vref_uv;
+	int channels;
 	struct adcxx *adc;
 	int status;
 	int i;
 
+	match = of_match_device(adcxx_of_ids, &spi->dev);
+	if (match)
+		channels = (int)(uintptr_t)match->data;
+	else
+		channels = spi_get_device_id(spi)->driver_data;
+
 	adc = devm_kzalloc(&spi->dev, sizeof(*adc), GFP_KERNEL);
 	if (!adc)
 		return -ENOMEM;
 
-	/* set a default value for the reference */
-	adc->reference = 3300;
+	vref = devm_regulator_get_optional(&spi->dev, "vref");
+	if (!IS_ERR(vref)) {
+		vref_uv = regulator_get_voltage(vref);
+		adc->reference = DIV_ROUND_CLOSEST(vref_uv, 1000);
+	}
+	if (!adc->reference)
+		adc->reference = 3300;
+	dev_dbg(&spi->dev, "Reference voltage set to %dmV\n", adc->reference);
+
 	adc->channels = channels;
 	mutex_init(&adc->lock);
 
@@ -223,10 +270,10 @@ static int adcxx_remove(struct spi_device *spi)
 }
 
 static const struct spi_device_id adcxx_ids[] = {
-	{ "adcxx1s", 1 },
-	{ "adcxx2s", 2 },
-	{ "adcxx4s", 4 },
-	{ "adcxx8s", 8 },
+	{ "adcxx1s", ADCXX1S },
+	{ "adcxx2s", ADCXX2S },
+	{ "adcxx4s", ADCXX4S },
+	{ "adcxx8s", ADCXX8S },
 	{ },
 };
 MODULE_DEVICE_TABLE(spi, adcxx_ids);
@@ -234,6 +281,7 @@ MODULE_DEVICE_TABLE(spi, adcxx_ids);
 static struct spi_driver adcxx_driver = {
 	.driver = {
 		.name	= "adcxx",
+		.of_match_table = of_match_ptr(adcxx_of_ids),
 	},
 	.id_table = adcxx_ids,
 	.probe	= adcxx_probe,
